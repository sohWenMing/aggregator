// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feeds.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (id, created_at, updated_at, name, url, user_id)
VALUES($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, name, url, user_id, last_fetched_at
`

type CreateFeedParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
	UserID    uuid.UUID
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
		arg.UserID,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastFetchedAt,
	)
	return i, err
}

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH inserted_feed_follow AS (
    INSERT INTO feed_follows (id, created_at, updated_at, user_id, feed_id)
    VALUES($1, $2, $3, $4, $5)
    RETURNING id, created_at, updated_at, user_id, feed_id
)

SELECT 
    inserted_feed_follow.id, inserted_feed_follow.created_at, inserted_feed_follow.updated_at, inserted_feed_follow.user_id, inserted_feed_follow.feed_id,
    feeds.name AS feed_name,
    users.name AS user_name
    FROM inserted_feed_follow
    JOIN feeds
      ON inserted_feed_follow.feed_id = feeds.id
    JOIN users
      ON inserted_feed_follow.user_id = users.id
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
}

type CreateFeedFollowRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
	FeedName  string
	UserName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.FeedName,
		&i.UserName,
	)
	return i, err
}

const deleteFeedFollow = `-- name: DeleteFeedFollow :exec
DELETE from feed_follows
WHERE feed_follows.user_id = $1
  AND feed_follows.feed_id IN (
    SELECT feed_follows.feed_id
      FROM feed_follows
      JOIN feeds
        ON feed_follows.feed_id = feeds.id
     WHERE feeds.url = $2
  )
`

type DeleteFeedFollowParams struct {
	UserID uuid.UUID
	Url    string
}

func (q *Queries) DeleteFeedFollow(ctx context.Context, arg DeleteFeedFollowParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollow, arg.UserID, arg.Url)
	return err
}

const getFeedFollowForUser = `-- name: GetFeedFollowForUser :many
SELECT feeds.name as feed_name, feeds.url as feed_url, users.name as user_name
  FROM feed_follows
  JOIN users
    ON feed_follows.user_id = users.id
  JOIN feeds
    ON feed_follows.feed_id = feeds.id
  WHERE feed_follows.user_id = $1
`

type GetFeedFollowForUserRow struct {
	FeedName string
	FeedUrl  string
	UserName string
}

func (q *Queries) GetFeedFollowForUser(ctx context.Context, userID uuid.UUID) ([]GetFeedFollowForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowForUserRow
	for rows.Next() {
		var i GetFeedFollowForUserRow
		if err := rows.Scan(&i.FeedName, &i.FeedUrl, &i.UserName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedIdByURL = `-- name: GetFeedIdByURL :one
SELECT feeds.id
  FROM feeds
  WHERE feeds.url = $1
`

func (q *Queries) GetFeedIdByURL(ctx context.Context, url string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getFeedIdByURL, url)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getFeeds = `-- name: GetFeeds :many
SELECT feeds.name AS FeedName, feeds.url AS FeedUrl, users.name as UserName
  FROM feeds
  JOIN users
    ON feeds.user_id = users.id
`

type GetFeedsRow struct {
	Feedname string
	Feedurl  string
	Username string
}

func (q *Queries) GetFeeds(ctx context.Context) ([]GetFeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsRow
	for rows.Next() {
		var i GetFeedsRow
		if err := rows.Scan(&i.Feedname, &i.Feedurl, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNextFeedToFetch = `-- name: GetNextFeedToFetch :one
SELECT feeds.id, feeds.created_at, feeds.updated_at, feeds.name, feeds.url, feeds.user_id, feeds.last_fetched_at
  FROM feeds
  ORDER BY feeds.last_fetched_at NULLS FIRST
  LIMIT 1
`

func (q *Queries) GetNextFeedToFetch(ctx context.Context) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getNextFeedToFetch)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastFetchedAt,
	)
	return i, err
}

const markFetchedFeed = `-- name: MarkFetchedFeed :exec
UPDATE feeds
SET updated_at = $1, last_fetched_at = $1
WHERE feeds.id = $2
`

type MarkFetchedFeedParams struct {
	UpdatedAt time.Time
	ID        uuid.UUID
}

func (q *Queries) MarkFetchedFeed(ctx context.Context, arg MarkFetchedFeedParams) error {
	_, err := q.db.ExecContext(ctx, markFetchedFeed, arg.UpdatedAt, arg.ID)
	return err
}

const resetFeeds = `-- name: ResetFeeds :exec
DELETE from feeds
`

func (q *Queries) ResetFeeds(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetFeeds)
	return err
}
